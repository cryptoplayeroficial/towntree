let totalItems={},totalBuildings={},totalConstructions={},totalStorage=[],cheapest=!0,collapsed=!0,craftItems=[],craftBuildings=[],workerBuildings=[],storageBuildings=[];const ITEM_CARD="item",CRAFT_CARD="craft",STORAGE_CARD="storage",WORK_CARD="work";let scale=1,translationX=0,translationY=0;const treeContainer=document.querySelector(".tf-tree"),treeContent=document.querySelector(".tf-tree-content"),totalsContainer=document.getElementById("totalsContainer");class Item{constructor(t,e,n,i,a,o,s,r,l,d,c,u,m){this.Name=t,this.Stars=e,this.Gain=n,this.Bonus=i,this.Penalty=a,this.Time0=o,this.Time1=s,this.Time2=r,this.Time3=l,this.Needs=d,this.CraftedIn=c,this.StoredIn=u,this.Workers=m}}class WorkerBuilding{constructor(t,e,n,i,a,o,s){this.Name=t,this.BuildCost=e,this.LaborCost=n,this.Require=i,this.Needs=a,this.CraftBuilding=o,this.StorageBuilding=s}}class CraftBuilding{constructor(t,e,n,i,a,o,s,r,l){this.Name=t,this.BuildCost=e,this.LaborCost=n,this.Require=i,this.Emit=a,this.Dist=o,this.Needs=s,this.Crafts=r,this.Workers=l}}class StorageBuilding{constructor(t,e,n,i,a,o,s,r,l){this.Name=t,this.BuildCost=e,this.Capacity=n,this.Require=i,this.Emit=a,this.Dist=o,this.StorageType=s,this.Needs=r,this.Workers=l}}function createCollections(){for(const t in Buildings){const e=Buildings[t];if("None"===e.BlockChainID)if(0===e.Capacity&&"None"===e.Crafts&&e.LaborCost>0){const n=Array.from(new Set(e.OutputPickup.replace(/[()]/g,"").split(",")));workerBuildings[t]=new WorkerBuilding(e.Name,e.BuildCost,e.LaborCost,e.EdgeRequirements,[],n.filter(t=>isNotSpecial(t)&&"None"!==t),[])}else"None"!==e.Crafts?craftBuildings[t]=new CraftBuilding(e.Name,e.BuildCost,e.LaborCost,e.EdgeRequirements,e.ProximityEmit,e.ProximityDist,[],e.Crafts.split(","),[]):"None"===e.Crafts&&0!==e.Capacity&&(storageBuildings[t]=new StorageBuilding(e.Name,e.BuildCost,e.Capacity,e.EdgeRequirements,e.ProximityEmit,e.ProximityDist,e.StorageType.split(","),[],[]))}}function populateBuilding(t,e){if("Construction_Free"!==Buildings[e].Construction&&"None"!==Buildings[e].Construction){const n=Constructions[Buildings[e].Construction],i=[{key:n.Req1,value:n.Value1},{key:n.Req2,value:n.Value2},{key:n.Req3,value:n.Value3}].filter(t=>"none"!==t.key&&t.value>0);t.Needs=i.map(t=>t)}t instanceof CraftBuilding?t.Workers=Object.values(workerBuildings).filter(e=>e.CraftBuilding.includes(t.Name)).map(t=>t.Name):t instanceof StorageBuilding&&(t.Workers=Object.values(workerBuildings).filter(e=>e.StorageBuilding.includes(t.Name)).map(t=>t.Name))}function populateCollection(){for(const t in workerBuildings)populateBuilding(workerBuildings[t],t);for(const t in craftBuildings)populateBuilding(craftBuildings[t],t);for(const t in storageBuildings)populateBuilding(storageBuildings[t],t)}function createCraftItems(){for(const t in Items){const e=Items[t],n=[],i=[];for(const t in craftBuildings){const a=craftBuildings[t];a.Crafts&&a.Crafts.includes(e.Name)&&(i.push(a.Name),n.push(...a.Workers))}const a=[];for(const t in storageBuildings){const n=storageBuildings[t];n.StorageType&&n.StorageType.includes(e.Class)&&a.push(n.Name)}const o=[{key:e.Req1,value:e.Value1},{key:e.Req2,value:e.Value2},{key:e.Req3,value:e.Value3}].filter(t=>"none"!==t.key&&t.value>0);craftItems[t]=new Item(e.Name,e.CityPoints,e.CityPrice,e.ProximityBonus,e.ProximityPenalty,e.Time0,e.Time1,e.Time2,e.Time3,[...o.map(t=>t)],i,a,[...new Set(n)])}return craftItems}function adjustItems(){let t=craftItems.Cold;t.StoredIn=[],t.CraftedIn=[];for(const e in craftBuildings){const n=craftBuildings[e];n.Emit&&n.Emit.includes(t.Name)&&t.CraftedIn.push(n.Name)}}function startDrag(t){isMouseDown=!0,startX=t.clientX||t.touches[0].clientX,startY=t.clientY||t.touches[0].clientY,previousX=startX,previousY=startY,treeContainer.classList.remove("grab"),treeContainer.classList.add("grabbing"),initialTranslationX=translationX}function drag(t){if(!isMouseDown)return;t.preventDefault();const e=t.clientX||t.touches[0].clientX,n=t.clientY||t.touches[0].clientY,i=e-startX;translationX=initialTranslationX+i,applyTransform(),window.scrollBy(0,previousY-n),previousX=e,previousY=n}function endDrag(t){isMouseDown=!1,previousX=t.clientX||t.changedTouches&&t.changedTouches[0].clientX||previousX,previousY=t.clientY||t.changedTouches&&t.changedTouches[0].clientY||previousY,treeContainer.classList.remove("grabbing"),treeContainer.classList.add("grab")}function checkScreenSize(){if(window.matchMedia("(max-width: 480px)").matches){var t=document.getElementById("totalsContainer"),e=document.getElementById("treeContainer"),n=document.createElement("div");n.className="row",n.appendChild(t),e.parentNode.insertBefore(n,e.nextSibling)}}function isNotSpecial(t){return["Common_","Uncommon_","Rare_","Legendary_","Epic_","Ancient_","Big_","Diamond_","Luxury_","Great_","Tesla_","Natural_","Ground_"].every(e=>!t.startsWith(e))}function loadItems(){const t=document.getElementById("itemSelect");for(const e in craftItems){const n=document.createElement("option");n.value=e,n.textContent=craftItems[e].Name,t.appendChild(n)}}function setupItemSelect(){document.getElementById("itemSelect").addEventListener("change",function(){clearCardsContainer(),clearTotalsContainer(),totalStorage=[],totalBuildings=[],totalConstructions=[];const t=this.value;t&&(craftItemNeedsCard({key:t,value:1},document.querySelector(".tf-tree-content"),ITEM_CARD),updateTotals(),centralizeContent())})}function centralizeContent(){const t=treeContainer.getBoundingClientRect(),e=treeContent.getBoundingClientRect();translationX=(t.width-e.width)/2,translationY=(t.height-e.height)/2,applyTransform()}function clearCardsContainer(){const t=document.querySelector(".tf-tree ul");for(;t.firstChild;)t.removeChild(t.firstChild);scale=1,translationX=0,translationY=0,applyTransform()}function clearTotalsContainer(){const t=document.getElementById("totalsContainer");for(;t.firstChild;)t.removeChild(t.firstChild);totalItems={},totalConstructions={}}function applyTransform(){document.querySelector(".tf-tree-content").style.transform=`translate(${translationX}px, ${translationY}px) scale(${scale})`}function createCard(t,e,n,i){let a=Items[t];const o=document.createElement("div");o.className="tf-nc item",o.addEventListener("click",function(){this.parentElement.classList.toggle("tf-collapsed"),centralizeContent()});let s={CityPoints:"Stars",CityPrice:"Gain",ProximityBonus:"Bonus",ProximityPenalty:"Penalty",Time0:"Time0",Time1:"Time1",Time2:"Time2",Time3:"Time3"};if(n!=ITEM_CARD)a=Buildings[t],o.className="tf-nc building "+n,s={BuildCost:"Cost",Capacity:"Capacity",EdgeRequirements:"Require",ProximityEmit:"Emit",ProximityDist:"EmitD"};else{const e=document.createElement("div");e.className="card-modal",e.style.display="none",o.appendChild(e),o.addEventListener("mouseover",function(){e.style.display="block"}),o.addEventListener("mouseout",function(){e.style.display="none"});const n=document.createElement("button");n.textContent="Choose",e.appendChild(n),n.addEventListener("click",function(){const e=document.getElementById("itemSelect");e.value=t,e.dispatchEvent(new Event("change"))})}const r=document.createElement("h4");r.textContent=a.Name.replace("_"," ")+" "+e,o.appendChild(r);for(const t in s)if(a[t]){const e=document.createElement("p");e.textContent=`${s[t]}: ${a[t]}`,o.appendChild(e)}let l=document.createElement("li");return collapsed&&!i&&(l.className="tf-collapsed"),l.appendChild(o),l}function updateTotals(){for(var t in totalStorage)totalBuildings[t]=totalStorage[t];for(var t in totalBuildings)for(var e in totalBuildings[t].needs){var n=totalBuildings[t].needs[e].value*totalBuildings[t].units,i=totalBuildings[t].needs[e].key;totalConstructions[i]?totalConstructions[i]+=n:totalConstructions[i]=n}for(var t in totalBuildings)totalBuildings[t]=totalBuildings[t].units;totalsContainer.appendChild(addTotal(totalItems,"Craft Needs")),totalsContainer.appendChild(addTotal(totalConstructions,"Construction Needs")),totalsContainer.appendChild(addTotal(totalBuildings,"Buildings"))}function addTotal(t,e){const n=document.createElement("div");n.classList.add("totals-div");const i=document.createElement("h4");i.textContent=e,n.appendChild(i);for(const e in t){const i=document.createElement("p");i.textContent=e.replace("_"," ")+": "+t[e],n.appendChild(i)}return n}function craftItemNeedsCard(t,e,n,i){const a=createCard(t.key,`(${t.value})`,ITEM_CARD,i);e.appendChild(a);const o=document.createElement("ul");let s=craftItems[t.key],r=t.key==document.getElementById("itemSelect").value;n!=ITEM_CARD||r||(totalItems[t.key]?totalItems[t.key]+=t.value:totalItems[t.key]=t.value);let l=getBuildingWithBestCost(s.StoredIn);if(!l||"Water"==t.key||"Feed"==t.key&&cheapest||(totalStorage[l]?(totalStorage[l].stored+=t.value,totalStorage[l].units=Math.ceil(totalStorage[l].stored/totalStorage[l].capacity)):totalStorage[l]={capacity:Buildings[l].Capacity,stored:t.value+(r?9:0),units:1,needs:storageBuildings[l].Needs}),!i&&"Stars"!=t.key){let e="Feed"==t.key&&cheapest,i="Energy"==t.key&&cheapest;e||i||s.Needs.forEach(t=>{let e=["Energy","Feed","Wood","Water","Oak_Wood","Stars"].includes(t.key);craftItemNeedsCard(t,o,n,e)});var d=getBuildingWithBestCost(s.CraftedIn);d&&(createRelatedCard(d,o,CRAFT_CARD),addBuilding(d,craftBuildings)),!l||"Water"==t.key||e||i||createRelatedCard(l,o,STORAGE_CARD);var c=getBuildingWithBestCost(s.Workers);c&&!e&&(createRelatedCard(c,o,WORK_CARD),addBuilding(c,workerBuildings)),a.appendChild(o)}return a}function addBuilding(t,e){totalBuildings[t]?totalBuildings[t].units++:totalBuildings[t]={units:1,needs:e[t].Needs}}function getBuildingWithBestCost(t){let e=cheapest?1/0:-1/0,n=null;for(const i of t){const t=Buildings[i];"None"===t.BlockChainID&&(cheapest&&t.BuildCost<e?(e=t.BuildCost,n=i):!cheapest&&t.BuildCost>e?(e=t.BuildCost,n=i):t.BuildCost===e&&(cheapest&&t.LaborCost<Buildings[n].LaborCost?n=i:!cheapest&&t.LaborCost>Buildings[n].LaborCost?n=i:t.LaborCost===Buildings[n].LaborCost&&("None"!==t.Construction&&"Construction_Free"!==t.Construction||(n=i))))}return n}function createRelatedCard(t,e,n){let i=[];switch(n){case STORAGE_CARD:i=storageBuildings[t].Needs;break;case CRAFT_CARD:i=craftBuildings[t].Needs;break;case WORK_CARD:i=workerBuildings[t].Needs;break;default:return void console.error("Invalid card type provided!")}const a=createCard(t,"",n,i.length<1);if(e.appendChild(a),i.length>0){const t=document.createElement("ul");a.appendChild(t),i.forEach(e=>{let i=["Energy","Feed","Wood","Water","Oak_Wood","Stars"].includes(e.key);craftItemNeedsCard(e,t,n,i)})}}createCollections(),populateCollection(),createCraftItems(),adjustItems(),document.addEventListener("DOMContentLoaded",function(){loadItems(),setupItemSelect(),document.getElementById("strategy-select").addEventListener("change",function(t){cheapest="cheapest"===t.target.value,document.getElementById("itemSelect").dispatchEvent(new Event("change"))}),document.getElementById("view-select").addEventListener("change",function(t){collapsed="collapsed"===t.target.value,document.getElementById("itemSelect").dispatchEvent(new Event("change"))});document.getElementById("reset-zoom").addEventListener("click",function(){scale=1,translationX=0,translationY=0,applyTransform()}),document.getElementById("fitContentButton").addEventListener("click",function(){scale=1,translationX=0,translationY=0;const t=treeContainer.getBoundingClientRect(),e=treeContent.getBoundingClientRect(),n=t.width/e.width,i=t.height/e.height,a=Math.min(n,i),o=(t.width-a*e.width)/2,s=(t.height-a*e.height)/2;scale=a,translationX=o,translationY=s,applyTransform()}),treeContainer.addEventListener("wheel",t=>{t.preventDefault();let e=scale+-.003*t.deltaY;e=Math.min(Math.max(e,.4),1);const n=treeContent.getBoundingClientRect(),i=t.clientX-n.left,a=t.clientY-n.top;let o=translationX+i*(1-e/scale),s=translationY+a*(1-e/scale);const r=treeContainer.getBoundingClientRect(),l=treeContent.getBoundingClientRect(),d=r.width-e*l.width,c=r.height-e*l.height;o=Math.min(Math.max(o,d),0),s=Math.min(Math.max(s,c),0),scale=e,translationX=o,translationY=s,applyTransform()});treeContainer.addEventListener("mousedown",startDrag),treeContainer.addEventListener("mousemove",drag),treeContainer.addEventListener("mouseup",endDrag),treeContainer.addEventListener("mouseleave",endDrag),treeContainer.addEventListener("touchstart",startDrag),treeContainer.addEventListener("touchmove",drag),treeContainer.addEventListener("touchend",endDrag),treeContainer.addEventListener("touchcancel",endDrag),checkScreenSize(),window.addEventListener("resize",checkScreenSize)});